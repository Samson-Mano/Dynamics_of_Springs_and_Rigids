#pragma once
#include "modal_elementline_list_store.h"
#include "../geometry_objects/dynamic_tri_list_store.h"


struct modal_elementquad_store
{
	int quad_id = 0; // ID of the quadrilateral element
	modal_node_store* nd1 = nullptr; // node 1
	modal_node_store* nd2 = nullptr; // node 2
	modal_node_store* nd3 = nullptr; // node 3
	modal_node_store* nd4 = nullptr; // node 4

	// Point coordinate
	glm::vec3 nd1pt = glm::vec3(0);
	glm::vec3 nd2pt = glm::vec3(0);
	glm::vec3 nd3pt = glm::vec3(0);
	glm::vec3 nd4pt = glm::vec3(0);

	// Edge point
	glm::vec3 mid12pt = glm::vec3(0);
	glm::vec3 mid23pt = glm::vec3(0);
	glm::vec3 mid34pt = glm::vec3(0);
	glm::vec3 mid41pt = glm::vec3(0);
	glm::vec3 midqdpt = glm::vec3(0);

	// Point displacements
	std::vector<glm::vec3> nd1_modal_displ;
	std::vector<glm::vec3> nd2_modal_displ;
	std::vector<glm::vec3> nd3_modal_displ;
	std::vector<glm::vec3> nd4_modal_displ;

	std::vector<glm::vec3> v12_modal_displ; // eigen vector at mid of 1-2
	std::vector<glm::vec3> v23_modal_displ; // eigen vector at mid of 2-3
	std::vector<glm::vec3> v34_modal_displ; // eigen vector at mid of 3-4
	std::vector<glm::vec3> v41_modal_displ; // eigen vector at mid of 4-1
	std::vector<glm::vec3> v_mid_modal_displ; // eigen vector at quad mid
};


class modal_elementquad_list_store
{
public:
	unsigned int modal_elementquad_count = 0;
	std::unordered_map<int, modal_elementquad_store> modal_elementquadMap; // Create an unordered_map to store Quadrilaterals with ID as key

	modal_elementquad_list_store();
	~modal_elementquad_list_store();
	void init(geom_parameters* geom_param_ptr);
	void add_modal_elementquadrilateral(int& quad_id, modal_node_store* nd1, modal_node_store* nd2,
		modal_node_store* nd3, modal_node_store* nd4,
		std::vector<glm::vec3>& v12,
		std::vector<glm::vec3>& v23,
		std::vector<glm::vec3>& v34,
		std::vector<glm::vec3>& v41,
		std::vector<glm::vec3>& v_mid);
	void clear_data();
	void set_buffer();
	void update_buffer(int selected_mode);
	void paint_modal_elementquadrilaterals();
	void update_geometry_matrices(bool set_modelmatrix, bool set_pantranslation, bool set_rotatetranslation,
		bool set_zoomtranslation, bool set_transparency, bool set_deflscale);
private:
	geom_parameters* geom_param_ptr = nullptr;
	// Anti clockwise
	//   4____m34____3		
	//   |		     |     
	//   m41	m	m23
	//   |			 |    
	//   1_____m12___2        

	dynamic_tri_list_store modal_element_tris1_m_m12; // Tri 1_m_m12
	dynamic_tri_list_store modal_element_tris1_m41_m; // Tri 1_m41_m
	dynamic_tri_list_store modal_element_tris2_m12_m; // Tri 2_m12_m
	dynamic_tri_list_store modal_element_tris2_m_m23; // Tri 2_m_m23
	dynamic_tri_list_store modal_element_tris3_m23_m; // Tri 3_m23_m
	dynamic_tri_list_store modal_element_tris3_m_m34; // Tri 3_m_m34
	dynamic_tri_list_store modal_element_tris4_m34_m; // Tri 4_m34_m
	dynamic_tri_list_store modal_element_tris4_m_m41; // Tri 4_m_m41

};


//_______________________________________________________________________________________________
//_______________________________________________________________________________________________
//_______________________________________________________________________________________________
//_______________________________________________________________________________________________

#include "modal_elementquad_list_store.h"

modal_elementquad_list_store::modal_elementquad_list_store()
{
	// Empty Constructor
}

modal_elementquad_list_store::~modal_elementquad_list_store()
{
	// Empty Destructor
}

void modal_elementquad_list_store::init(geom_parameters* geom_param_ptr)
{
	// Set the geometry parameters
	this->geom_param_ptr = geom_param_ptr;

	// Set the geometry parameters for the quads (and clear the quads)
	modal_element_tris1_m_m12.init(geom_param_ptr); // Tri 1_m_m12
	modal_element_tris1_m41_m.init(geom_param_ptr); // Tri 1_m41_m
	modal_element_tris2_m12_m.init(geom_param_ptr); // Tri 2_m12_m
	modal_element_tris2_m_m23.init(geom_param_ptr); // Tri 2_m_m23
	modal_element_tris3_m23_m.init(geom_param_ptr); // Tri 3_m23_m
	modal_element_tris3_m_m34.init(geom_param_ptr); // Tri 3_m_m34
	modal_element_tris4_m34_m.init(geom_param_ptr); // Tri 4_m34_m
	modal_element_tris4_m_m41.init(geom_param_ptr); // Tri 4_m_m41


	// Clear the element quads
	modal_elementquad_count = 0;
	modal_elementquadMap.clear();
}

void modal_elementquad_list_store::clear_data()
{
	// Clear the element quads
	modal_element_tris1_m_m12.clear_triangles(); // Tri 1_m_m12
	modal_element_tris1_m41_m.clear_triangles(); // Tri 1_m41_m
	modal_element_tris2_m12_m.clear_triangles(); // Tri 2_m12_m
	modal_element_tris2_m_m23.clear_triangles(); // Tri 2_m_m23
	modal_element_tris3_m23_m.clear_triangles(); // Tri 3_m23_m
	modal_element_tris3_m_m34.clear_triangles(); // Tri 3_m_m34
	modal_element_tris4_m34_m.clear_triangles(); // Tri 4_m34_m
	modal_element_tris4_m_m41.clear_triangles(); // Tri 4_m_m41

	// Clear the element quads
	modal_elementquad_count = 0;
	modal_elementquadMap.clear();

}

void modal_elementquad_list_store::add_modal_elementquadrilateral(int& quad_id, modal_node_store* nd1,
	modal_node_store* nd2, modal_node_store* nd3, modal_node_store* nd4,
	std::vector<glm::vec3>& v12,
	std::vector<glm::vec3>& v23,
	std::vector<glm::vec3>& v34,
	std::vector<glm::vec3>& v41,
	std::vector<glm::vec3>& v_mid)
{
	// Add result quad element
	modal_elementquad_store temp_quad;
	temp_quad.quad_id = quad_id;
	temp_quad.nd1 = nd1;
	temp_quad.nd2 = nd2;
	temp_quad.nd3 = nd3;
	temp_quad.nd4 = nd4;

	// Add the point coordinate
	temp_quad.nd1pt = (*nd1).node_pt;
	temp_quad.nd2pt = (*nd2).node_pt;
	temp_quad.nd3pt = (*nd3).node_pt;
	temp_quad.nd4pt = (*nd4).node_pt;

	// Set the mid points of the edges
	temp_quad.mid12pt = geom_parameters::linear_interpolation3d(temp_quad.nd1pt,temp_quad.nd2pt,0.5);
	temp_quad.mid23pt = geom_parameters::linear_interpolation3d(temp_quad.nd2pt, temp_quad.nd3pt, 0.5);
	temp_quad.mid34pt = geom_parameters::linear_interpolation3d(temp_quad.nd3pt, temp_quad.nd4pt, 0.5);
	temp_quad.mid41pt = geom_parameters::linear_interpolation3d(temp_quad.nd4pt, temp_quad.nd1pt, 0.5);
	temp_quad.midqdpt = geom_parameters::linear_interpolation3d(temp_quad.mid23pt, temp_quad.mid41pt, 0.5);

	// Add the modal displacement
	temp_quad.nd1_modal_displ = (*nd1).node_modal_displ;
	temp_quad.nd2_modal_displ = (*nd2).node_modal_displ;
	temp_quad.nd3_modal_displ = (*nd3).node_modal_displ;
	temp_quad.nd4_modal_displ = (*nd4).node_modal_displ;

	temp_quad.v12_modal_displ = v12; // eigen vector at mid of 1-2
	temp_quad.v23_modal_displ = v23; // eigen vector at mid of 2-3
	temp_quad.v34_modal_displ = v34; // eigen vector at mid of 3-4
	temp_quad.v41_modal_displ = v41; // eigen vector at mid of 4-1
	temp_quad.v_mid_modal_displ = v_mid; // eigen vector at quad mid

	// Check whether the node_id is already there
	if (modal_elementquadMap.find(quad_id) != modal_elementquadMap.end())
	{
		// Element ID already exist (do not add)
		return;
	}

	// Insert to the lines
	modal_elementquadMap.insert({ quad_id, temp_quad });
	modal_elementquad_count++;

}

void modal_elementquad_list_store::set_buffer()
{
	// Clear existing modal quads (8 triangles)
	modal_element_tris1_m_m12.clear_triangles(); // Tri 1_m_m12
	modal_element_tris1_m41_m.clear_triangles(); // Tri 1_m41_m
	modal_element_tris2_m12_m.clear_triangles(); // Tri 2_m12_m
	modal_element_tris2_m_m23.clear_triangles(); // Tri 2_m_m23
	modal_element_tris3_m23_m.clear_triangles(); // Tri 3_m23_m
	modal_element_tris3_m_m34.clear_triangles(); // Tri 3_m_m34
	modal_element_tris4_m34_m.clear_triangles(); // Tri 4_m34_m
	modal_element_tris4_m_m41.clear_triangles(); // Tri 4_m_m41

	// Add the lines
	// Loop throug every line element
	int i = 0;
	for (auto& quad_m : modal_elementquadMap)
	{
		modal_elementquad_store quad = quad_m.second;

		// Node 1
		std::vector<glm::vec3> nd1_point_displ; // Node 1 displ
		std::vector<glm::vec3> nd1_point_color; // Node 1 color

		// Node 2
		std::vector<glm::vec3> nd2_point_displ; // Node 2 displ
		std::vector<glm::vec3> nd2_point_color; // Node 2 color

		// Node 3
		std::vector<glm::vec3> nd3_point_displ; // Node 3 displ
		std::vector<glm::vec3> nd3_point_color; // Node 3 color

		// Node 4
		std::vector<glm::vec3> nd4_point_displ; // Node 4 displ
		std::vector<glm::vec3> nd4_point_color; // Node 4 color

		// Edge 12
		std::vector<glm::vec3> mid12_point_displ; // Edge 12 displ
		std::vector<glm::vec3> mid12_point_color; // Edge 12 color

		// Edge 23
		std::vector<glm::vec3> mid23_point_displ; // Edge 23 displ
		std::vector<glm::vec3> mid23_point_color; // Edge 23 color

		// Edge 34
		std::vector<glm::vec3> mid34_point_displ; // Edge 34 displ
		std::vector<glm::vec3> mid34_point_color; // Edge 34 color

		// Edge 41
		std::vector<glm::vec3> mid41_point_displ; // Edge 41 displ
		std::vector<glm::vec3> mid41_point_color; // Edge 41 color

		// Mid Node
		std::vector<glm::vec3> midqd_point_displ; // Mid displ
		std::vector<glm::vec3> midqd_point_color; // Mid color

		for (int j = 0; j < static_cast<int>(quad.nd1_modal_displ.size()); j++)
		{
			//____________________________________________________________________________________________________________
			// Node 1
			glm::vec3 nd1_displ = glm::vec3(quad.nd1_modal_displ[j].x,
				quad.nd1_modal_displ[j].y,
				quad.nd1_modal_displ[j].z);

			// Find the displacment value
			double nd1_displ_value = glm::length(nd1_displ);

			glm::vec3 nd1_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - nd1_displ_value));


			//____________________________________________________________________________________________________________
			// Node 2
			glm::vec3 nd2_displ = glm::vec3(quad.nd2_modal_displ[j].x,
				quad.nd2_modal_displ[j].y,
				quad.nd2_modal_displ[j].z);

			// Find the displacment value
			double nd2_displ_value = glm::length(nd2_displ);

			glm::vec3 nd2_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - nd2_displ_value));


			//____________________________________________________________________________________________________________
			// Node 3
			glm::vec3 nd3_displ = glm::vec3(quad.nd3_modal_displ[j].x,
				quad.nd3_modal_displ[j].y,
				quad.nd3_modal_displ[j].z);

			// Find the displacment value
			double nd3_displ_value = glm::length(nd3_displ);

			glm::vec3 nd3_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - nd3_displ_value));


			//____________________________________________________________________________________________________________
			// Node 4
			glm::vec3 nd4_displ = glm::vec3(quad.nd4_modal_displ[j].x,
				quad.nd4_modal_displ[j].y,
				quad.nd4_modal_displ[j].z);

			// Find the displacment value
			double nd4_displ_value = glm::length(nd4_displ);

			glm::vec3 nd4_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - nd4_displ_value));

			//____________________________________________________________________________________________________________
			// Edge 12
			glm::vec3 mid12_displ = glm::vec3(quad.v12_modal_displ[j].x,
				quad.v12_modal_displ[j].y,
				quad.v12_modal_displ[j].z);

			// Find the displacment value
			double mid12_displ_value = glm::length(mid12_displ);

			glm::vec3 mid12_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - mid12_displ_value));


			//____________________________________________________________________________________________________________
			// Edge 23
			glm::vec3 mid23_displ = glm::vec3(quad.v23_modal_displ[j].x,
				quad.v23_modal_displ[j].y,
				quad.v23_modal_displ[j].z);

			// Find the displacment value
			double mid23_displ_value = glm::length(mid23_displ);

			glm::vec3 mid23_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - mid23_displ_value));


			//____________________________________________________________________________________________________________
			// Edge 34
			glm::vec3 mid34_displ = glm::vec3(quad.v34_modal_displ[j].x,
				quad.v34_modal_displ[j].y,
				quad.v34_modal_displ[j].z);

			// Find the displacment value
			double mid34_displ_value = glm::length(mid34_displ);

			glm::vec3 mid34_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - mid34_displ_value));


			//____________________________________________________________________________________________________________
			// Edge 41
			glm::vec3 mid41_displ = glm::vec3(quad.v41_modal_displ[j].x,
				quad.v41_modal_displ[j].y,
				quad.v41_modal_displ[j].z);

			// Find the displacment value
			double mid41_displ_value = glm::length(mid41_displ);

			glm::vec3 mid41_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - mid41_displ_value));


			//____________________________________________________________________________________________________________
			// Mid quad
			glm::vec3 midqd_displ = glm::vec3(quad.v_mid_modal_displ[j].x,
				quad.v_mid_modal_displ[j].y,
				quad.v_mid_modal_displ[j].z);

			// Find the displacment value
			double midqd_displ_value = glm::length(midqd_displ);

			glm::vec3 midqd_contour_color = geom_parameters::getContourColor_d(static_cast<float>(1.0 - midqd_displ_value));


			//____________________________________________________________________________________________________________
			//____________________________________________________________________________________________________________
			//____________________________________________________________________________________________________________

			// Node 1
			nd1_point_displ.push_back(nd1_displ); // Node 1 displ
			nd1_point_color.push_back(nd1_contour_color); // Node 1 color

			// Node 2
			nd2_point_displ.push_back(nd2_displ); // Node 2 displ
			nd2_point_color.push_back(nd2_contour_color); // Node 2 color

			// Node 3
			nd3_point_displ.push_back(nd3_displ); // Node 3 displ
			nd3_point_color.push_back(nd3_contour_color);  // Node 3 color

			// Node 4
			nd4_point_displ.push_back(nd4_displ); // Node 4 displ
			nd4_point_color.push_back(nd4_contour_color);  // Node 4 color

			// Edge 12
			mid12_point_displ.push_back(mid12_displ); // Edge 12 displ
			mid12_point_color.push_back(mid12_contour_color); // Edge 12 color

			// Edge 23
			mid23_point_displ.push_back(mid23_displ); // Edge 23 displ
			mid23_point_color.push_back(mid23_contour_color); // Edge 23 color

			// Edge 34
			mid34_point_displ.push_back(mid34_displ); // Edge 34 displ
			mid34_point_color.push_back(mid34_contour_color); // Edge 34 color

			// Edge 41
			mid41_point_displ.push_back(mid41_displ); // Edge 41 displ
			mid41_point_color.push_back(mid41_contour_color); // Edge 41 color

			// Mid Node
			midqd_point_displ.push_back(midqd_displ); // Mid displ
			midqd_point_color.push_back(midqd_contour_color); // Mid color
		}


		// Add to the 8 triangle list
		modal_element_tris1_m_m12.add_tri(i, quad.nd1pt, quad.midqdpt, quad.mid12pt,
											nd1_point_displ, midqd_point_displ, mid12_point_displ,
											nd1_point_color, midqd_point_color, mid12_point_color); // Tri 1_m_m12
		modal_element_tris1_m41_m.add_tri(i, quad.nd1pt, quad.mid41pt, quad.midqdpt,
											nd1_point_displ, mid41_point_displ, midqd_point_displ,
											nd1_point_color, mid41_point_color, midqd_point_color); // Tri 1_m41_m

		modal_element_tris2_m12_m.add_tri(i, quad.nd2pt, quad.mid12pt, quad.midqdpt,
											nd2_point_displ, mid12_point_displ, midqd_point_displ,
											nd2_point_color, mid12_point_color, midqd_point_color); // Tri 2_m12_m
		modal_element_tris2_m_m23.add_tri(i, quad.nd2pt, quad.midqdpt, quad.mid23pt,
											nd2_point_displ, midqd_point_displ, mid23_point_displ,
											nd2_point_color, midqd_point_color, mid23_point_color); // Tri 2_m_m23

		modal_element_tris3_m23_m.add_tri(i, quad.nd3pt, quad.mid23pt, quad.midqdpt,
											nd3_point_displ, mid23_point_displ, midqd_point_displ,
											nd3_point_color, mid23_point_color, midqd_point_color); // Tri 3_m23_m
		modal_element_tris3_m_m34.add_tri(i, quad.nd3pt, quad.midqdpt, quad.mid34pt,
											nd3_point_displ, midqd_point_displ, mid34_point_displ,
											nd3_point_color, midqd_point_color, mid34_point_color); // Tri 3_m_m34

		modal_element_tris4_m34_m.add_tri(i, quad.nd4pt, quad.mid34pt, quad.midqdpt,
											nd4_point_displ, mid34_point_displ, midqd_point_displ,
											nd4_point_color, mid34_point_color, midqd_point_color); // Tri 4_m34_m
		modal_element_tris4_m_m41.add_tri(i, quad.nd4pt, quad.midqdpt, quad.mid41pt,
											nd4_point_displ, midqd_point_displ, mid41_point_displ,
											nd4_point_color, midqd_point_color, mid41_point_color); // Tri 4_m_m41



		i++;
	}

	// Set the buffer
	modal_element_tris1_m_m12.set_buffer(); // Tri 1_m_m12
	modal_element_tris1_m41_m.set_buffer(); // Tri 1_m41_m
	modal_element_tris2_m12_m.set_buffer(); // Tri 2_m12_m
	modal_element_tris2_m_m23.set_buffer(); // Tri 2_m_m23
	modal_element_tris3_m23_m.set_buffer(); // Tri 3_m23_m
	modal_element_tris3_m_m34.set_buffer(); // Tri 3_m_m34
	modal_element_tris4_m34_m.set_buffer(); // Tri 4_m34_m
	modal_element_tris4_m_m41.set_buffer(); // Tri 4_m_m41
}


void modal_elementquad_list_store::update_buffer(int selected_mode)
{
	// Update the buffer based on the selected mode
	modal_element_tris1_m_m12.update_buffer(selected_mode); // Tri 1_m_m12
	modal_element_tris1_m41_m.update_buffer(selected_mode); // Tri 1_m41_m
	modal_element_tris2_m12_m.update_buffer(selected_mode); // Tri 2_m12_m
	modal_element_tris2_m_m23.update_buffer(selected_mode); // Tri 2_m_m23
	modal_element_tris3_m23_m.update_buffer(selected_mode); // Tri 3_m23_m
	modal_element_tris3_m_m34.update_buffer(selected_mode); // Tri 3_m_m34
	modal_element_tris4_m34_m.update_buffer(selected_mode); // Tri 4_m34_m
	modal_element_tris4_m_m41.update_buffer(selected_mode); // Tri 4_m_m41

}


void modal_elementquad_list_store::paint_modal_elementquadrilaterals()
{
	// Paint the triangles
	modal_element_tris1_m_m12.paint_triangles(); // Tri 1_m_m12
	modal_element_tris1_m41_m.paint_triangles(); // Tri 1_m41_m
	modal_element_tris2_m12_m.paint_triangles(); // Tri 2_m12_m
	modal_element_tris2_m_m23.paint_triangles(); // Tri 2_m_m23
	modal_element_tris3_m23_m.paint_triangles(); // Tri 3_m23_m
	modal_element_tris3_m_m34.paint_triangles(); // Tri 3_m_m34
	modal_element_tris4_m34_m.paint_triangles(); // Tri 4_m34_m
	modal_element_tris4_m_m41.paint_triangles(); // Tri 4_m_m41

}

void modal_elementquad_list_store::update_geometry_matrices(bool set_modelmatrix, bool set_pantranslation, 
	bool set_rotatetranslation, bool set_zoomtranslation, bool set_transparency, bool set_deflscale)
{
	modal_element_tris1_m_m12.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris1_m41_m.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris2_m12_m.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris2_m_m23.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris3_m23_m.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris3_m_m34.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris4_m34_m.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);
	modal_element_tris4_m_m41.update_opengl_uniforms(set_modelmatrix, set_pantranslation, set_rotatetranslation,
		set_zoomtranslation, set_transparency, set_deflscale);

}

